name: OpenWrt Builder

on:
  repository_dispatch:
  workflow_dispatch:

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: [self-hosted, Linux, X64]

    steps:
      - name: Checkout
        uses: actions/checkout@main

      # hosted 才执行的初始化（自托管自动跳过，避免 sudo 报错）
      - name: Initialization environment
        if: ${{ false }}
        run: echo "skip on self-hosted"

      - name: Clone source code
        run: |
          df -hT $PWD
          git clone $REPO_URL -b $REPO_BRANCH openwrt
          ln -sf $GITHUB_WORKSPACE/openwrt openwrt

      - name: Load custom feeds
        run: |
          [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
          chmod +x $DIY_P1_SH
          cd openwrt
          $GITHUB_WORKSPACE/$DIY_P1_SH

      - name: Update feeds
        run: cd openwrt && ./scripts/feeds update -a

      - name: Install feeds
        run: cd openwrt && ./scripts/feeds install -a

      - name: Load custom configuration
        run: |
          [ -e files ] && mv files openwrt/files
          [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
          chmod +x $DIY_P2_SH
          cd openwrt
          $GITHUB_WORKSPACE/$DIY_P2_SH

      # 关闭已知易失败的包（amule + strace）
      - name: Disable problematic packages (amule, strace)
        shell: bash
        run: |
          cd openwrt
          # 关掉 aMule 全家桶（存在什么就关什么）
          for p in amule amuled amule-utils amule-utils-gui amule-webui; do
            ./scripts/config -d "PACKAGE_${p}" || true
            sed -i "/^CONFIG_PACKAGE_${p}[=m|=y]/d" .config || true
          done
          # 顺手关掉之前出问题的 strace
          ./scripts/config -d PACKAGE_strace || true
          sed -i '/^CONFIG_PACKAGE_strace[=m|=y]/d' .config || true
          make defconfig

      - name: Build tools & toolchain (fail fast)
        shell: bash
        run: |
          cd openwrt
          make defconfig
          make tools/install -j"$(nproc)" V=s
          make toolchain/install -j"$(nproc)" V=s

      - name: Early package probe (fast fail)
        shell: bash
        run: |
          set -e
          cd openwrt
          # 只探测体量不大的用户态应用，避免拖长时间
          CANDIDATES=$(grep -E '^CONFIG_PACKAGE_(amule|strace).+=(y|m)$' .config \
            | sed -E 's/^CONFIG_PACKAGE_(.+)=(y|m)/\1/' || true)
          for p in $CANDIDATES; do
            echo ">>> probing package: $p"
            make -j"$(nproc)" "package/$p/compile" V=s
          done

      - name: Download package
        id: package
        run: |
          cd openwrt
          make defconfig
          make download -j8
          find dl -size -1024c -exec ls -l {} \; | cat
          find dl -size -1024c -exec rm -f {} \;

      # 额外再次确认关闭 aMule 全家桶（确保不会在 compile 阶段触发）
      - name: Disable problematic packages (amule family)
        shell: bash
        run: |
          set -e
          cd openwrt
          PKGS="amule amuled amule-utils amule-utils-gui amule-webui luci-app-amule"
          for p in $PKGS; do
            ./scripts/config -d "PACKAGE_${p}" || true
            sed -i "/^CONFIG_PACKAGE_${p}[=m|=y]/d" .config || true
            echo "# CONFIG_PACKAGE_${p} is not set" >> .config
          done
          make defconfig
          echo "== after sanitizing =="
          egrep 'amule|luci-app-amule' .config || echo "(none)"

      - name: Compile the firmware
        id: compile
        run: |
          set -e
          cd openwrt
          echo -e "$(nproc) thread compile"
          if ! make -j"$(nproc)"; then
            echo "parallel failed, fallback to -j1 V=s"
            make -j1 V=s
          fi
          if [ ! -d "bin/targets" ]; then
            echo "build finished but no bin/targets"; exit 1
          fi
          echo "status=success" >> $GITHUB_OUTPUT
          grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME || true
          [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
          echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
