name: OpenWrt Builder

on:
  repository_dispatch:
  workflow_dispatch:

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: [self-hosted, Linux, X64]

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    # 自托管信息与空间检查（无 sudo）
    - name: Show runner env & disk
      run: |
        echo "Runner: ${{ runner.name }}"
        echo "Labels: ${{ runner.labels }}"
        df -h
        free -h
        # 空间不足直接失败（20G阈值）
        FREE=$(df -k --output=avail / | tail -1)
        if [ "$FREE" -lt 20971520 ]; then
          echo "❌ Not enough disk space"; exit 1; fi

    #（可选）托管机初始化：仅在非自托管时执行。你是自托管，这步会自动跳过
    - name: Initialization for hosted runner (skipped on self-hosted)
      if: ${{ !contains(runner.labels, 'self-hosted') }}
      env: { DEBIAN_FRONTEND: noninteractive }
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
        sudo docker image prune --all --force
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"

    # 自托管：不使用 /workdir、不用 sudo；直接在工作区操作
    - name: Clone source code
      run: |
        git clone "$REPO_URL" -b "$REPO_BRANCH" openwrt
        ls -la

    - name: Load custom feeds
      run: |
        [ -e "$FEEDS_CONF" ] && mv "$FEEDS_CONF" openwrt/feeds.conf.default
        chmod +x "$DIY_P1_SH"
        cd openwrt
        "$GITHUB_WORKSPACE/$DIY_P1_SH"

    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e "$CONFIG_FILE" ] && mv "$CONFIG_FILE" openwrt/.config
        chmod +x "$DIY_P2_SH"
        cd openwrt
        "$GITHUB_WORKSPACE/$DIY_P2_SH"

    - name: Download package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -print -delete || true

    - name: Compile the firmware
      id: compile
      shell: bash
      run: |
        set -e
        cd openwrt
        echo -e "$(nproc) thread compile"
        /usr/bin/time -v make -j"$(nproc)" || { echo "fallback to -j1"; make -j1 V=s; }
        echo "status=success" >> "$GITHUB_OUTPUT"
        # 设备名与时间
        grep '^CONFIG_TARGET.*DEVICE_.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME || true
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> "$GITHUB_ENV"
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> "$GITHUB_ENV"

    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name: Upload bin directory
      uses: actions/upload-artifact@v4
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    # ✅ 稳定定位固件目录并写 FIRMWARE（修复 Organize files 失败）
    - name: Locate firmware directory
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      shell: bash
      run: |
        set -euo pipefail
        shopt -s nullglob
        base="$GITHUB_WORKSPACE/openwrt/bin/targets"
        arr=("$base"/*/*)
        if [[ ${#arr[@]} -eq 0 ]]; then
          echo "❌ No firmware directory under $base" >&2
          find "$GITHUB_WORKSPACE/openwrt" -maxdepth 5 -type f \( -name '*.bin' -o -name '*.img.gz' -o -name '*.tar' \) | head -n 50
          exit 1
        fi
        FIRMWARE="${arr[0]}"
        echo "FIRMWARE=$FIRMWARE" >> "$GITHUB_ENV"
        echo "Firmware dir: $FIRMWARE"
        ls -lh "$FIRMWARE"
        echo "status=success" >> "$GITHUB_OUTPUT"

    - name: Upload firmware directory
      uses: actions/upload-artifact@v4
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Generate release tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> "$GITHUB_OUTPUT"
        echo "OpenWrt auto build" > release.txt
        echo "status=success" >> "$GITHUB_OUTPUT"

    # ✅ 仅上传固件后缀，避免误扫到 /swapfile
    - name: Upload firmware to release
      uses: softprops/action-gh-release@v2
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: |
          ${{ env.FIRMWARE }}/*.bin
          ${{ env.FIRMWARE }}/*.img.gz
          ${{ env.FIRMWARE }}/*.tar
          ${{ env.FIRMWARE }}/*.manifest

    - name: Delete workflow runs
      uses: Mattraks/delete-workflow-runs@v2
      with:
        retain_days: 0
        keep_minimum_runs: 2

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@v0.3.2
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
